#!/bin/bash

#WHAT DOES THIS SCRIPT DO? 
#It calculates the band-gap energy through the .bands file. If you have many .bands file in a folder, it will calculates the band-gap energy for ALL the .bands file.

#HOW TO USE?
#Copy this script to your calculation folder that contains the .bands file. Or copy all of your .bands file to the same folder and put this script there.
#Type in the therminal the following command: ./calc_gap
#If you get error, type in the terminal: chmod +x calc_gap

#Adjust this variable to modify the way this script checks whether the gap is direct or indirect. In general, the band is plotted between the values of 0.00 and 0.12 eV for the X axis, so to check if the top of the valence band is aligned with the bottom of the conduction band within a certain limit, it is Once a tolerance is established, the smaller the tolerance, the small variations in the X-axis values for the top of the valence and the bottom of the conduction will answer that the gap is Indirect, and vice versa.
tolerancia=0.003

#Adjust this variable to modify the tolerance for range variation of the Y-axis values. Often, for a difference of only one centsimal or milesimal, the script may argue that the top of the valence is too far from the bottom of the band. driving, when in fact they are aligned. This variation of centsimal and milesimal houses is extremely important for verifying whether the gap is direct or indirect. Reduce this value if you want to be stricter, or increase if the script finds a wrong indirect gap.
variation=0.01

#By: Caio Vinícius C. R. da Silva - caioviniciuscaetano@hotmail.com

helpFunction()
{
   echo -e "WHAT DOES THIS TOOL DO?\nIt calculates the band-gap energy through the .bands file. If you have many .bands file in a folder, it will calculates the band-gap energy for ALL the .bands file."
   echo -e "\nUSAGE:\nCopy this script to your calculation folder that contains the .bands file. Or copy all of your .bands file to the same folder and put this script there.\nType in the therminal the following command: ./calc_gap\nIf you get error, type in the terminal: chmod +x calc_gap"
   echo -e "\nOPTIONS:\n-s or --show: Show if the band-gap is DIRECT or INDIRECT. However, this is an EXPERIMENTAL option, so sometimes the answer shown may be wrong.\n-x or --x_variation: Default: 0.003. Use this to improve the precision of prediction if the gap is DIRECT or INDIRECT. It will modify the variation of X axis values used to verify the band-gap type.\n-y or --y_variation: Default: 0.01. Use this to improve the precision of prediction if the gap is DIRECT or INDIRECT. It will modify the variation of Y axis values used to verify the band-gap type.\n-h or --help: Show the help.\n-V or --Version: Show the help"
   exit 1 # Exit script after printing help
}
mostrar_tipo_de_gap=0
for arg in "$@"
do
    case $arg in
	-s | --show )
	mostrar_tipo_de_gap=1
	shift
	;;
	
	-x | --x_variation )
	tolerancia=$2
	len=${#tolerancia}
	testvar=$(echo "$tolerancia" | tr -c '0-9.' '\n')     # remove non-numeric chars from $tolerancia
	if [[ $len -ne ${#testvar} ]] ; then 
		echo -e "\nError: $tolerancia is not a number"  # error message
		exit
	fi
	shift
	shift
	;;
	
	-y | --y_variation )
	variation=$2
	len=${#variation}
	testvar=$(echo "$variation" | tr -c '0-9.' '\n')     # remove non-numeric chars from $variation
	if [[ $len -ne ${#testvar} ]] ; then 
		echo -e "\nError: $variation is not a number"  # error message
		exit
	fi
	shift
	shift
	;;
	
    -V | --Version )
      echo 1.1
	  exit
    ;;
	
	-h | --help )
	helpFunction 
	;;  
  esac
done

bands=(`find *.bands`)
if [ ${#bands[*]} -eq 0 ];then
  echo -e "\nERROR: No .bands file found"
  exit  
fi 

declare -a arquivo_bands
for file in *.bands
do
    arquivo_bands=("${arquivo_bands[@]}" "$file")
done
echo "Calculating the BAND-GAP for the following file(s):" ${arquivo_bands[*]}
for ((a=0; a<${#arquivo_bands[*]}; a++))
do

coluna_max=`awk '{print NF}' ${arquivo_bands[$a]} | awk 'NR == 1 || $1 > max {line = $0; max = $1}END{print line}'`
nv_fermi=`head -n 1 ${arquivo_bands[$a]} | tail -1 | awk '{print $1}'` 
total_linhas1=`wc  ${arquivo_bands[$a]} | awk '{print $1}'`
result1=$(($total_linhas1-7))
tail -n +5 ${arquivo_bands[$a]} | head -n $result1 > gap_linha

echo 99999 > gap_linhas
for ((i=1; i<=$coluna_max; i++)) 
do
  j=$(($i+1))
  if [ $i -ne $coluna_max ];then
    awk -v coluna_max=$coluna_max -v col=$i '{if ((NF != coluna_max)){print $col" "NR}}' gap_linha >> gap_linhas
  fi
  if [ $j -le $coluna_max ];then
    awk -v coluna_max=$coluna_max -v col=$j '{if ((NF == coluna_max)){print $col" "NR}}' gap_linha >> gap_linhas
  fi
done

padrao_nv_fermi=`echo $nv_fermi | cut -f1 -d"."`
lim_min=$(($padrao_nv_fermi-1))
lim_max=$(($padrao_nv_fermi+1))

valores_down=()
valores_up=()

echo 99999 > gap_up
echo -99999 > gap_down
for ((i=1; i<=$coluna_max; i++)) 
do
  awk -v n=$lim_min -v o=$nv_fermi -v "col=$i" '{if ($col >= n && $col <= o){print $col}}' gap_linhas >> gap_down
  awk -v o=$nv_fermi -v m=$lim_max -v "col=$i" '{if ($col >= o && $col <= m){print $col}}' gap_linhas >> gap_up
  linhas_up=`wc gap_up | awk '{print $1}'`
  linhas_down=`wc gap_down | awk '{print $1}'`
  if [ $linhas_down -ne 1 ] && [ $linhas_up -ne 1 ]; then
    i=$coluna_max
  else
	if [ $linhas_down -eq 1 ];then
	  i=0
	  lim_min=$(($lim_min-1))
	  echo 99999 > gap_up
      echo -99999 > gap_down
	fi
	if [ $linhas_up -eq 1 ]; then
	  i=0
	  lim_max=$(($lim_max+1))
	  echo 99999 > gap_up
      echo -99999 > gap_down
	fi
  fi
done

total_linhas2=`wc gap_down | awk '{print $1}'`
total_linhas3=`wc gap_up | awk '{print $1}'`

num1=`awk 'NR == 1 || $1 < min {line = $0; min = $1}END{print line}' gap_up`
num2=`awk 'NR == 1 || $1 > max {line = $0; max = $1}END{print line}' gap_down`

gap=`echo $num1 $num2 | awk '{printf "%f", $1 - $2}'`

#Verificar tipo de gap
if [ $mostrar_tipo_de_gap != 0 ]; then
  linha_num1=(`grep -- $num1 gap_linhas | awk '{print $2}'`)
  linha_num2=(`grep -- $num2 gap_linhas | awk '{print $2}'`)

  linha_up=0
  linha_down=0
  dif=999999999
  for ((i=0; i<${#linha_num1[*]}; i++)) 
  do  
     for ((j=0; j<${#linha_num2[*]}; j++)) 
     do  
       calc=`echo ${linha_num1[$i]} ${linha_num2[$j]} | awk '{if (($1 < $2)){printf "%f", $2 - $1}else{printf "%f", $1 - $2}}'`
       if [ ${calc%.*} -lt $dif ];then
	     dif=${calc%.*}
	     linha_up=${linha_num1[$i]}
	     linha_down=${linha_num2[$j]}
	   fi
     done
  done

  valor_up=(`awk '{print NR" "NF" "$1}' gap_linha | awk -v n=$coluna_max -v m=$linha_up '{if ($2 == n && $1 <= m){print $1" "$3}}' | awk 'NR == 1 || $1 > max {line = $0; max = $1}END{print $2}'`)
  valor_down=(`awk '{print NR" "NF" "$1}' gap_linha | awk -v n=$coluna_max -v m=$linha_down '{if ($2 == n && $1 <= m){print $1" "$3}}' | awk 'NR == 1 || $1 > max {line = $0; max = $1}END{print $2}'`)
  intervalo=`echo $valor_up $valor_down | awk '{if (($1 < $2)){printf "%f", $2 - $1}else{printf "%f", $1 - $2}}'`
  
#Aplicando variacao  
  line_up1=(`awk '{print NR" "NF" "$1}' gap_linha | awk -v n=$coluna_max -v m=$linha_up '{if ($2 == n && $1 <= m){print $1" "$3}}' | awk 'NR == 1 || $1 > max {line = $0; max = $1}END{print line}'`)
  line_up2=(`awk '{print NR" "NF" "$1}' gap_linha | awk -v n=$coluna_max -v m=$linha_up '{if ($2 == n && $1 >= m){print $1" "$3}}' | awk 'NR == 1 || $1 < min {line = $0; min = $1}END{print line}'`)
  tol1=`echo $num2 $variation | awk '{printf "%f", $1 - $2}'`
  tol2=`echo $num2 $variation | awk '{printf "%f", $1 + $2}'`
  variacao=(`awk '{print $1" "$2}' gap_linhas | awk -v k=$line_up1 -v n=$line_up2 -v m=$tol1 -v o=$tol2 '{if ($2 >= k  && $2 <= n && $1 >= m && $1 <= o ){print $1}}'`)
#Caso a variacao dê 0
if [ ${#variacao[*]} -eq 0 ];then  
  line_down1=(`awk '{print NR" "NF" "$1}' gap_linha | awk -v n=$coluna_max -v m=$linha_down '{if ($2 == n && $1 <= m){print $1" "$3}}' | awk 'NR == 1 || $1 > max {line = $0; max = $1}END{print line}'`)
  line_down2=(`awk '{print NR" "NF" "$1}' gap_linha | awk -v n=$coluna_max -v m=$linha_down '{if ($2 == n && $1 >= m){print $1" "$3}}' | awk 'NR == 1 || $1 < min {line = $0; min = $1}END{print line}'`)
  tol3=`echo $num1 $variation | awk '{printf "%f", $1 - $2}'`
  tol4=`echo $num1 $variation | awk '{printf "%f", $1 + $2}'`
  variacao=(`awk '{print $1" "$2}' gap_linhas | awk -v k=$line_down1 -v n=$line_down2 -v m=$tol3 -v o=$tol4 '{if ($2 >= k  && $2 <= n && $1 >= m && $1 <= o ){print $1}}'`)
fi 
#echo -e ${#variacao[*]} "\n"$tol1 $tol2 $line_up1 $line_up2 $num1 $num2 $valor_up $valor_down
gap_type=`echo $intervalo $tolerancia ${#variacao[*]} | awk -v d="Direct" -v i="Indirect" '{if (($1 > $2 && $3 == 0)){print i}else{print d}}'`
fi
if [ $mostrar_tipo_de_gap != 0 ]; then
  echo "Band-gap of" ${arquivo_bands[$a]}":" $gap "eV ("$gap_type")"
else
  echo "Band-gap of" ${arquivo_bands[$a]}":" $gap "eV"
fi
done
rm -rf gap_*
